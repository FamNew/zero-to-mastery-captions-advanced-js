WEBVTT

00:01.230 --> 00:02.620
Hey there everyone.

00:02.700 --> 00:09.090
We're now ready for yes 10 or Xmas script 20 19.

00:09.120 --> 00:09.900
That's right.

00:09.900 --> 00:10.620
Every year.

00:10.650 --> 00:14.460
They're constantly trying to improve the language and that is javascript.

00:14.460 --> 00:18.370
And now ESPN is the latest.

00:18.410 --> 00:23.750
So what new features do we get in this new version of JavaScript.

00:24.650 --> 00:27.890
Well luckily for you there aren't too many.

00:27.920 --> 00:38.290
So let's start off with my favorite one and it's called flat and flat is a method that we can use on

00:38.530 --> 00:40.610
a race.

00:40.640 --> 00:50.470
Let me show you what I mean let's say I have a array variable that contains a very exciting array of

00:50.470 --> 00:57.640
1 2 3 4 5 if I now run array dot flat.

00:57.680 --> 01:02.050
Let's copy this code and run it here.

01:02.100 --> 01:03.570
What do you think will happen.

01:04.140 --> 01:09.400
Well absolutely nothing we return to a new array.

01:09.420 --> 01:17.540
It looks like but it looks the exact same but this is where Flight gets exciting.

01:17.550 --> 01:20.350
Imagine if this had nested arrays.

01:20.430 --> 01:29.190
So for example two and three where it's own array and then four and five were also an array nested inside

01:29.190 --> 01:30.950
of a bigger array.

01:31.170 --> 01:36.900
If I now copy this and let's call this array to find out.

01:36.930 --> 01:42.330
Copy this and pasted in here Hey check that out.

01:42.530 --> 01:46.160
We get a new array that is flattened.

01:46.340 --> 01:50.700
That is there's no nested Arrays anymore.

01:50.920 --> 01:58.040
All right let's keep going then and what happens if we have array 3 and array 3 is even more nested

01:58.190 --> 02:09.570
than we had before let's say we have one two three like this and then maybe we'll have a five that is

02:10.230 --> 02:14.270
well nested pretty deep like that.

02:14.310 --> 02:21.450
So now we have an array there's an other array and inside of that there's another array.

02:21.510 --> 02:23.110
What do you think will happen here.

02:23.410 --> 02:27.360
Want to copy and paste run this code.

02:27.380 --> 02:28.420
All right.

02:28.580 --> 02:36.550
So I get a new array back but we see that there's actually not a completely flat array.

02:36.560 --> 02:44.970
Instead we have one two three four but then five was only flattened one level so essentially just removed

02:45.150 --> 02:48.370
these brackets.

02:48.380 --> 02:54.470
Now the interesting thing with flat is that we can tell it how many layers to fly in the array.

02:54.620 --> 02:59.590
So if we go back to our example and in here the default was 1.

02:59.660 --> 03:01.370
But if we change this to two now

03:04.260 --> 03:12.720
let's copy and paste let's refreshes and run it again a look at that we have a completely flattened

03:12.900 --> 03:13.220
array.

03:13.800 --> 03:20.680
So in here I can tell it how many times I want to fly in or how many layers I want to fly in the array.

03:20.750 --> 03:20.990
All right.

03:21.000 --> 03:23.580
But I have a really exciting example for you.

03:23.580 --> 03:25.620
Get ready for this.

03:25.650 --> 03:30.510
Congratulations you just became the owner of Jurassic Park.

03:30.510 --> 03:39.600
You have a park with all these ancient creatures and the t rex over here is extremely dangerous.

03:39.600 --> 03:40.180
That's why.

03:40.200 --> 03:48.090
Well it's in its own contained area of the park with a lot of barricades around because we don't want

03:48.090 --> 03:50.090
the t rex going wild.

03:50.190 --> 03:52.710
But here's the problem.

03:52.790 --> 03:55.190
You're a bad guy at Jurassic Park.

03:55.190 --> 04:02.610
If I asked you hey how can you completely flan this array how would you go about doing it.

04:03.570 --> 04:04.560
Pause the video.

04:04.560 --> 04:05.400
Think about it.

04:05.400 --> 04:07.070
Ready for the answer.

04:07.080 --> 04:16.980
Well we can do Jurassic Park dot flat and then you might want to actually count how many arrays are

04:16.980 --> 04:20.730
nested in here but there is a trick here.

04:21.830 --> 04:31.870
I could maybe just do 50 let's see what happens if I copy this let's make this a little bit bigger.

04:31.990 --> 04:33.480
I refresh here.

04:33.580 --> 04:35.190
Copy and paste this.

04:35.230 --> 04:36.930
Let's see what happens.

04:37.060 --> 04:40.940
And Jurassic Park should be Jurassic Park.

04:40.960 --> 04:42.430
Let's copy this again.

04:42.460 --> 04:46.060
Let's refresh.

04:46.090 --> 04:47.070
All right.

04:47.170 --> 04:52.220
All the barricades are down and the animals are now going wild.

04:52.370 --> 04:56.800
And I just randomly picked 50 because I knew that 50 wasn't.

04:56.870 --> 05:02.720
Well how many nested arrays we have now in the exercise after this video.

05:02.860 --> 05:10.600
I'm gonna show you a cool little trick of making sure that we can fund the utmost level but that's for

05:10.600 --> 05:11.680
the exercise.

05:11.720 --> 05:20.440
Another really useful thing that you can do with flat is let's say you get a bunch of entries and these

05:20.440 --> 05:30.130
entries from your users come in and maybe we get Bob we get Sally entering their name but then we also

05:30.130 --> 05:38.440
get a bunch of entries that are completely empty with maybe Cindy at the end here using flat.

05:38.440 --> 05:47.870
We can actually offline the entries and clean up our data so I can say entries dot flat like this.

05:48.100 --> 05:58.000
And if I copy and paste this look at that it cleans up the data for me which is really really nice.

05:58.070 --> 05:58.550
All right.

05:58.550 --> 06:10.980
The next feature of ESPN is flat map and flat map as the name suggests allows us to use a flat function

06:11.910 --> 06:17.280
and the map function or method on an array.

06:17.370 --> 06:19.680
So let's do something fun here.

06:19.740 --> 06:25.100
Let's say we have the Jurassic Park again and this time around we're going to use flat map.

06:25.140 --> 06:32.220
So let's say Jurassic Park and we'll call this new variable.

06:32.290 --> 06:33.650
Let's do concept.

06:33.800 --> 06:35.210
Jurassic Park.

06:35.420 --> 06:40.020
Chaos and this chaos will have.

06:40.020 --> 06:44.230
While the Jurassic Park array that we had above.

06:44.270 --> 06:46.160
Let's make this a little bit bigger.

06:46.370 --> 06:49.730
And now we can use a flat map to do something interesting.

06:51.110 --> 07:01.670
I can say for each item that we're going to fun we're going to get a creature and this creature using

07:01.670 --> 07:06.730
arrow functions is going to get creature plus the T-Rex.

07:06.740 --> 07:10.310
So I'm going to copy the T-Rex over here.

07:10.430 --> 07:16.910
So each creature is going to get a T-Rex as a neighbor which is well not good.

07:16.910 --> 07:23.840
They're all going to get eaten by the T-Rex is the T-Rex they cannot carnivore I'm not sure you'll have

07:23.840 --> 07:24.850
to google that on your own.

07:25.240 --> 07:25.760
All right.

07:25.820 --> 07:36.710
So we have the Jurassic Park flat map so I'm flattening the Jurassic Park and then mapping over this

07:36.840 --> 07:42.170
flattened array and doing some sort of a map function to it.

07:42.920 --> 07:53.230
So let's see what happens if I now copy this and I paste this in if I now check out what Jurassic Park

07:53.410 --> 08:04.680
chaos is and I hit enter oh boy look at that we have t rex neighbors with all the creatures and while

08:04.740 --> 08:11.940
it's absolute chaos and Jurassic Park flat map allows us to use the basic map function and then flattens

08:12.030 --> 08:14.980
the result to a depth of one.

08:15.000 --> 08:16.500
All right let's keep going.

08:16.590 --> 08:19.030
Next is a very very simple one.

08:19.050 --> 08:22.970
Let's say you get a user email and user email.

08:22.980 --> 08:29.880
Well it gets entered a little incorrectly so we get a bunch of spaces and then we have Eddie the Eagle

08:30.000 --> 08:39.200
at gmail dot com that we receive from the user or maybe we have user email too.

08:39.660 --> 08:50.610
And this time around Johnny Dangerous at G.M. dot com enters their information but we have again some

08:50.610 --> 08:52.580
blank spaces.

08:52.690 --> 08:53.930
What can we do.

08:53.980 --> 09:04.890
Well with the new iOS 10 feature we can simply say user email dot trim start on a string and it will

09:04.890 --> 09:17.600
trim the beginning and user email too can say trim and and trim the end of the string.

09:17.830 --> 09:20.800
So let's console dialogue log this and see what happens

09:24.300 --> 09:33.460
if I copy this and make sure we declare these variables so be const and make sure that I can smell e-mail

09:33.490 --> 09:34.600
right.

09:34.600 --> 09:39.220
If I copy this now and enter it in here

09:42.230 --> 09:48.870
I don't know if you can see but now my strings don't have any blank spaces in them.

09:49.040 --> 09:57.890
If I check out user email here you see that the blank space is still there but the new generated string

09:58.820 --> 10:04.720
user email start won't have any blank spaces.

10:04.840 --> 10:08.840
Nice and easy.

10:08.890 --> 10:10.750
All right we're flying through these.

10:10.780 --> 10:11.760
What's next.

10:11.770 --> 10:13.650
We only have a few more left.

10:13.720 --> 10:15.320
Actually two more left.

10:15.400 --> 10:18.570
The next one is called form entries.

10:18.760 --> 10:23.950
It transforms a list of key value pairs into an object.

10:23.950 --> 10:29.260
Let me show you what I mean let's clear this and let's just comment.

10:29.260 --> 10:30.440
All of this.

10:30.880 --> 10:36.650
Maybe bring it down to the bottom and focus on this one.

10:36.770 --> 10:48.630
So imagine we had some user profiles that we receive but these user profiles are formatted in the wrong

10:48.630 --> 10:49.560
way.

10:49.560 --> 10:56.850
So we have let's say an array and inside of an array we have the user profiles of a game.

10:56.850 --> 11:07.330
So we have let's call him Commander Tom as the player name and Commander Tom is 23 years old.

11:07.360 --> 11:20.700
Next we have a let's say an array of Derek Zealander and Derek Zealander is let's say 40 let's make

11:20.700 --> 11:23.960
this a little bit bigger.

11:24.110 --> 11:34.190
And then finally we have an array Hansel and Hansel is 18 so we have these user profiles but as a race

11:34.250 --> 11:36.100
they're not really useful right now.

11:36.110 --> 11:44.330
Wouldn't it be great if we can convert them into an object where each user name is associated with an

11:44.360 --> 11:44.720
H.

11:45.320 --> 11:48.460
Well this is exactly what entries is used for.

11:48.740 --> 12:03.320
We simply do object dot form or from entries so from entries and from entries is going to receive an

12:03.320 --> 12:05.150
array like this.

12:05.150 --> 12:13.320
So let's do user profiles here and see what happens fight.

12:13.340 --> 12:14.210
Copy this code

12:17.050 --> 12:18.350
paste it in here.

12:20.100 --> 12:21.270
Hey look at that.

12:21.480 --> 12:24.940
We get an object now with Commander Tom.

12:24.940 --> 12:26.030
Twenty three.

12:26.040 --> 12:34.320
Derek Zealander has a key and a value of 40 and Hansel has a key of Hansel and value of eighteen.

12:34.440 --> 12:41.700
Now the name might trigger something while you're watching this because in yes eight we talked about

12:42.570 --> 12:45.370
something called entries right.

12:45.720 --> 12:54.860
Object dot entries allowed us to do well the exact opposite thing.

12:54.880 --> 13:04.540
So for example if this was now an object if I do object entries on this object now.

13:04.540 --> 13:07.150
So let's copy and paste refreshes

13:09.770 --> 13:13.100
I get exactly what I had originally back.

13:13.130 --> 13:16.570
So from entries the name from entries simply comes from.

13:16.640 --> 13:18.880
Well object dot entries.

13:18.950 --> 13:19.310
All right.

13:19.310 --> 13:19.800
All right.

13:19.910 --> 13:21.310
One last one I promise.

13:21.310 --> 13:22.500
And then we're done.

13:22.640 --> 13:34.600
The last part is an update to a feature that we have in JavaScript which is the try catch block like

13:34.600 --> 13:36.330
this.

13:36.390 --> 13:42.810
Now this try catch block is something we're going to talk about a lot more when we get into the asynchronous

13:43.170 --> 13:45.530
javascript part of the course.

13:45.780 --> 13:53.730
But essentially the try and cache block in JavaScript allow us to try a piece of code and if there's

13:53.730 --> 13:56.350
any errors to catch them.

13:56.400 --> 14:09.560
So for example if I do hear let's say four plus five and I run this piece of code i click Run I get

14:09.670 --> 14:10.430
nine.

14:10.590 --> 14:15.970
It's the exact same thing as us writing four plus five.

14:15.980 --> 14:23.810
The only difference is that within this tribe block we're telling javascript Hey try this and if there's

14:23.810 --> 14:29.110
any errors on line three here then do something within the cache block.

14:29.750 --> 14:44.580
So I could for example say console dot log you messed up and now if I do let's say true or true plus

14:45.090 --> 14:56.010
hi fi copy and paste this and run this code I get true high because of something we've seen before that

14:56.010 --> 14:57.830
is type coercion.

14:58.350 --> 15:07.470
So it tried this in javascript that is valid javascript because it turns true into a string and combines

15:07.470 --> 15:08.500
it with high.

15:08.640 --> 15:12.230
But if we let's say do a variable that we haven't seen before.

15:12.240 --> 15:21.770
So instead of true let's say we have a bob variable fire run this I get to the cache block which says

15:22.040 --> 15:29.990
you messed up because while this through an error and as soon as it throws an error it catches and here's

15:29.990 --> 15:30.710
the thing.

15:30.710 --> 15:39.050
You actually saw a new feature here in ESPN because back in the day before yes 10 in order for this

15:39.050 --> 15:47.280
code to actually catch you had to pass it an error object or parameter.

15:47.280 --> 15:49.050
So I could have called this whatever I want.

15:49.110 --> 15:55.850
So I had to do error like this so that I could perhaps say error.

15:56.040 --> 16:08.080
So if I copy this refresh and let's give Bob here so that we error out I get you messed up but then

16:08.080 --> 16:12.150
I also catch the error which is a reference error.

16:12.250 --> 16:13.420
Bob is not defined.

16:14.260 --> 16:21.970
So before we had to pass it a parameter otherwise this whole block of code even if it was working properly

16:22.390 --> 16:25.840
would actually error because we didn't pass it the parameter with.

16:25.840 --> 16:32.260
Yes Stan we have an update where you're not forced to use that parameter if you don't want to.

16:32.290 --> 16:37.210
Again this is something we'll cover later on in the course when we talk about asynchronous javascript

16:39.260 --> 16:44.190
oh boy that looked like a lot but I mean it wasn't that much rain.

16:44.330 --> 16:46.760
Nice and easy nice and simple.

16:46.760 --> 16:48.670
I'll see you in the next video.

16:48.670 --> 16:49.130
Bye bye.
