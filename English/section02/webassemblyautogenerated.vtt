WEBVTT

00:01.210 --> 00:06.760
Here's another test for you and maybe something that you've been asking yourself throughout these past

00:06.760 --> 00:08.120
couple of videos.

00:08.350 --> 00:15.250
If we have to do all this interpretation and compiling on the language why not just use machine code

00:15.340 --> 00:16.570
from the beginning.

00:17.360 --> 00:21.050
Why don't all programs just use machine code ahead of time.

00:21.050 --> 00:29.180
We compile our code let's say javascript and then we just give our Web sites our machine code so they

00:29.180 --> 00:35.390
don't have to worry about all this compiler interpretation and git compiling.

00:35.550 --> 00:38.410
What do you think the answer to that is.

00:38.430 --> 00:45.880
Take a second here pause the video and see if I can answer this yourself to test your comprehension.

00:45.890 --> 00:48.080
All right you ready for this.

00:48.140 --> 00:56.000
You see if javascript were compile then either compilation would have to be super fast because remember

00:56.030 --> 01:01.020
our JavaScript files get sent from the server to the browser.

01:01.250 --> 01:11.030
So the compiling has to happen on the browser or the competing browsers that is Firefox.

01:11.030 --> 01:20.780
Microsoft Edge chrome browsers would have to agree on some binary executable format or standard that

01:20.780 --> 01:26.210
can understand this machine code because at the end of the day these browsers are the ones that are

01:26.210 --> 01:28.230
executing the code.

01:28.280 --> 01:35.690
Now when javascript was created in nineteen ninety five that's the start of the browser wars where browsers

01:35.690 --> 01:37.840
are competing against each other.

01:37.940 --> 01:45.650
So compiling the code ahead of time or even just compiling the code on the browser was not feasible

01:45.770 --> 01:49.960
at all because back in the day that was really really slow.

01:50.480 --> 01:57.800
But also having all the browsers agree on an executable format to run javascript.

01:57.800 --> 02:00.290
Well they didn't get a launch so that was going to happen.

02:00.470 --> 02:08.980
Even now browsers have different ways of doing things and there's just no real standard but luckily

02:08.980 --> 02:12.530
enough things might change in the future.

02:12.560 --> 02:18.410
We now have something called Web assembly and something that you should really keep an eye on because

02:18.410 --> 02:21.280
this could be a game changer in the future.

02:21.330 --> 02:30.520
We have the standard binary executable format called Web assembly and this is what we didn't have in

02:30.520 --> 02:39.040
nineteen ninety five we didn't have the competing browsers agreeing on this format where we can compiler

02:39.040 --> 02:42.980
code all the way down to web assembly.

02:43.030 --> 02:50.470
This executable format so that it runs really really fast on the browser instead of having to go through

02:50.470 --> 02:53.130
that entire JavaScript engine process.

02:53.680 --> 02:56.430
So keep an eye on web assembly but I hope.

02:56.470 --> 03:02.230
Now if you've heard about web assembly and you're curious what it is that's the big advantage of it.

03:03.360 --> 03:09.930
We might not have to do all these interpreter compiler and all the steps that JavaScript requires to

03:09.930 --> 03:12.620
actually run the code on the browser.

03:12.630 --> 03:14.590
All right I'll see you in the next one.

03:14.890 --> 03:15.090
By.
