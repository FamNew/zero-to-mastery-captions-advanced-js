WEBVTT

00:00.820 --> 00:02.020
Welcome back.

00:02.020 --> 00:05.420
We just learned about this pillar of functional programming.

00:05.500 --> 00:14.830
The idea of a pure function where we have no side effects and the same input no matter how many times

00:14.830 --> 00:17.470
we call it gives us the same output.

00:18.130 --> 00:24.850
But I posed that question for you whether we can do anything without side effects because as I said

00:25.180 --> 00:26.620
console dialogue.

00:26.800 --> 00:28.610
Well that's a side effect.

00:28.690 --> 00:36.760
As a matter of fact input output is a side effect that is communicating with the outside world in any

00:36.760 --> 00:39.650
way which is what input output is.

00:39.760 --> 00:47.970
That is not pure and the interesting thing is that with just pure functions which are just functions

00:47.970 --> 00:55.790
that do something on the inside and the outside world knows nothing about is philosophically.

00:55.950 --> 01:02.730
Well it doesn't do anything because a program cannot exist without side effects.

01:02.730 --> 01:09.710
We can't run this piece of code without having a side effect of interacting with the browser.

01:09.810 --> 01:19.350
We can't have Web sites with just pure functions can we browsers have to make fetch calls EDP calls

01:19.530 --> 01:20.970
to the outside world.

01:21.060 --> 01:28.640
We have to interact with the Dom and manipulate what's on the Web site so the goal of functional programming

01:28.670 --> 01:31.710
is not to make everything pure functions.

01:31.730 --> 01:35.020
The goal is to minimize side effects.

01:35.030 --> 01:42.620
The idea is to organize your code with there is a specific part that has side effects but when you have

01:42.620 --> 01:48.260
a bug you know right away to go to that spot because that's where the side effects are happening the

01:48.260 --> 01:49.410
rest of your code.

01:49.430 --> 01:56.060
Well those are just pure functions and because they're pure we don't have to worry about them as much

01:56.570 --> 01:59.900
purity is more of a confidence level.

01:59.960 --> 02:01.820
It cannot be 100 percent.

02:01.820 --> 02:08.120
So if there's one thing that you take away from this is that side effects and impurity is not necessarily

02:08.120 --> 02:16.340
bad but the goal is to organize your code in a way so that you isolate these side effects.

02:16.340 --> 02:24.800
These database calls API calls input output to a certain location in your program in your code so that

02:25.130 --> 02:31.400
your code becomes predictable and easier to bug because at the end of the day we do have to have some

02:31.400 --> 02:35.890
sort of a global state to describe our application.

02:35.990 --> 02:37.530
That's unavoidable.

02:37.550 --> 02:43.310
This is just the tip of the iceberg when it comes to terminology and functional programming.

02:43.340 --> 02:51.200
It gets really complicated and there are some really large words like Referential transparency but as

02:51.200 --> 02:56.780
I said before at its core the essence of functional programming is very simple.

02:56.780 --> 03:07.610
We want to build programs that are built with a bunch of very small very reusable predictable pure functions.

03:07.700 --> 03:11.130
How do we build the perfect function.

03:11.240 --> 03:17.270
We're going to explore that over the next couple of videos but this is a quick reference a perfect function

03:17.750 --> 03:21.240
should do one task and one task only.

03:21.260 --> 03:22.880
We don't want a massive function.

03:22.880 --> 03:29.900
A simple function that we can test that does one thing really well that function should have a return

03:29.900 --> 03:33.650
statement every function should return something from it.

03:33.740 --> 03:40.280
Because when we give it an input we expect an output every function should be pure which we've talked

03:40.280 --> 03:48.560
about and that also means having no shared state with other functions and immutable state where we can

03:48.560 --> 03:56.120
modified some of the state within our functions but we always return whatever we get such as an input

03:56.330 --> 03:59.400
we always return a new copy of that output.

03:59.630 --> 04:06.560
We never just modify our global state functions are also going to be composing all something that we're

04:06.560 --> 04:09.410
really going to dive deep into later on.

04:09.530 --> 04:16.220
And most importantly we want to make functions predictable if we understand with 100 percent certainty

04:16.460 --> 04:20.670
what our functions do it makes our code predictable.

04:20.810 --> 04:27.610
Functional programming at the end of the day is just about making your code predictable.

04:27.680 --> 04:32.620
Let's dive in to some key concepts and key words when it comes to functional programming.
