WEBVTT

00:01.380 --> 00:02.340
Welcome back.

00:02.430 --> 00:09.000
Before we're able to talk about functional programming an object oriented programming and close this

00:09.000 --> 00:10.410
entire section out.

00:10.620 --> 00:14.550
We have to talk about composition versus inheritance.

00:14.550 --> 00:17.500
First what are those two things.

00:17.520 --> 00:20.440
And by now we should understand their meaning.

00:20.490 --> 00:21.560
Right.

00:21.570 --> 00:23.650
Inheritance is.

00:23.670 --> 00:28.590
Well it's a superclass like a character over here.

00:28.590 --> 00:33.630
And remember we've seen this code before with our Elf and yoga classes.

00:33.630 --> 00:41.790
Inheritance is a superclass that is extended to smaller pieces that add or overwrite things like here

00:43.180 --> 00:48.340
we had elf an ogre that extended the functionality of character.

00:48.340 --> 00:59.600
We used inheritance using class extends composition is smaller pieces to create something bigger.

00:59.630 --> 01:03.160
We've seen that before with compose right.

01:03.200 --> 01:07.920
We composed functions to give a function like purchase item.

01:07.940 --> 01:12.700
Different abilities compose to functions to act upon data differently.

01:12.860 --> 01:19.980
Smaller pieces that are combined to create something bigger the debate between composition versus inheritance

01:20.610 --> 01:27.600
is a pretty heavy one and a lot of people prefer composition over inheritance.

01:28.080 --> 01:34.410
So I wanted to talk to you about some of the problems that might come with inheritance and how composition

01:34.620 --> 01:37.210
might solve some of those problems.

01:37.220 --> 01:44.670
Now what I'm about to talk about doesn't specifically mean that hey object oriented programming is only

01:44.670 --> 01:49.320
inheritance and functional programming is only composition.

01:49.320 --> 01:53.460
No you can do both things in both paradigms.

01:53.460 --> 02:01.200
However one tends to focus more on composition like functional programming and one over inheritance.

02:01.200 --> 02:07.200
So in the next discussion that we're gonna have here I am generalizing and simplifying things to demonstrate

02:07.410 --> 02:08.220
what I mean.

02:08.250 --> 02:14.580
The goal is to understand some of the drawbacks that might come when using composition or inheritance.

02:14.580 --> 02:16.470
So let's get started.

02:16.500 --> 02:25.110
The first thing that we want to keep in mind when we talk about inheritance are structure and the structure

02:25.110 --> 02:31.480
of our code is around what it is.

02:31.730 --> 02:41.790
That is what is the character class what is the elf class we're structuring our classes around what

02:42.000 --> 02:52.010
things are they have data as well as methods and actions and functions that act upon that data with

02:52.040 --> 02:53.070
composition.

02:53.210 --> 03:04.860
On the other hand we focus and structure our code around what it has or what it does to data.

03:04.910 --> 03:11.360
So we're focusing on what the abilities are and what it is.

03:11.390 --> 03:15.580
Now I know that's not super clear but let's go over this.

03:15.860 --> 03:18.650
When we define something as what it is.

03:18.650 --> 03:23.960
We're saying hey character is going to have these properties methods.

03:23.960 --> 03:29.480
Elf is going to have these properties and methods and ogre is going to have these properties and methods

03:29.990 --> 03:36.810
but what if things change when we define things as what they are.

03:37.920 --> 03:45.070
We are saying that this is what's going to happen but as humans we're notoriously bad at predicting

03:45.070 --> 03:45.660
the future.

03:45.700 --> 03:46.250
Right.

03:46.390 --> 03:48.580
And we're assuming no change.

03:48.580 --> 03:56.990
So let's play out the scenario let's say that we now find out that we need to update our game and the

03:56.990 --> 04:04.480
character well the character needs to have a sleep method added to it.

04:05.150 --> 04:06.840
I mean that's fine right.

04:06.920 --> 04:08.080
Not a big deal.

04:08.120 --> 04:18.330
Now all my classes will that extend from character which will have this sleep method which is good.

04:18.440 --> 04:26.230
But there lies a problem called the tight coupling problem.

04:26.310 --> 04:35.350
You see the coupling between a child class and its parent is a very tight form of coupling.

04:35.550 --> 04:36.330
And what does that mean.

04:36.540 --> 04:44.760
Well it's the opposite of reusable modular code because making a small change to a class or even if

04:44.760 --> 04:55.460
we change something in the attack method will have these rippling effects to all its subclasses so maybe

04:55.460 --> 05:03.020
we made a small change like adding sleep or we made a small change where the attack method does something

05:03.020 --> 05:11.580
different down the road maybe the ogre class did something different to attack than now breaks things.

05:11.580 --> 05:21.030
Because some developer changed the parent class and this idea of a tightly coupled inheritance where

05:21.420 --> 05:28.770
you can change things in one place and will have rippling effects into the other can be a benefit where

05:28.770 --> 05:35.910
you don't you keep your code dry but can also cause a lot of problems so you have all these dependencies

05:35.910 --> 05:41.730
where if you change something on a class well you have to make sure that it doesn't break anything with

05:41.730 --> 05:43.500
its subclasses.

05:43.500 --> 05:50.820
And remember these subclasses are using inheritance and this leads to the other problem.

05:50.820 --> 05:54.240
And let me write it down just so you get reminded.

05:54.240 --> 06:03.270
We have the tight coupling problem which leads to the fragile base class problem.

06:05.320 --> 06:14.300
With inheritance where because the base class in this case the character class changes all subclasses.

06:14.560 --> 06:17.530
This can be very fragile because of tight coupling.

06:17.560 --> 06:26.180
It can break our code down the path another problem that we might encounter with inheritance is the

06:26.720 --> 06:29.540
hierarchy problem.

06:29.540 --> 06:34.760
We only have a simple setup here with character and Elf an ogre.

06:34.760 --> 06:39.290
But what if we had two different kinds of else.

06:39.400 --> 06:47.770
We had a boss Elf and a junior Elf and the boss elf or the junior elf inherits from the boss.

06:47.770 --> 06:48.860
Elf.

06:49.060 --> 06:54.640
The problem with this with this hierarchy is that well what if it changes.

06:54.640 --> 07:03.340
What if the junior elf for some reason in the game is higher up than the hierarchy then the boss elf

07:04.550 --> 07:11.170
and I hope you're starting to see a trend with this problem of the idea of what it is.

07:11.170 --> 07:19.480
Because with inheritance we can start getting into a situation where we design the game with let's say

07:19.480 --> 07:30.370
a user in mind then a character in mind that is a subclass and then we have the elf and the ogre but

07:30.370 --> 07:33.480
then all of a sudden the game changes or we need to make an update.

07:33.480 --> 07:39.330
So we also add a watcher class and so on and so forth.

07:39.520 --> 07:47.680
And the problem starts to arise now where we want to start sharing methods but let's say that I have

07:47.680 --> 07:57.550
the junior elf over here Junior elf class and the junior elf can't really do anything maybe just sleep

07:58.720 --> 08:01.240
so we create the junior elf.

08:01.240 --> 08:10.450
But the problem is now that because Junior Elf is inheriting from all these super classes it's going

08:10.450 --> 08:20.650
to inherit all the methods that well it doesn't really need and this is the classic gorilla banana problem

08:21.580 --> 08:27.360
when it comes to inheritance where it says Hey I just want a banana.

08:27.430 --> 08:33.700
Give me a banana but instead you get a gorilla holding a banana and the entire jungle underneath it.

08:33.700 --> 08:40.150
In this case the jungle being the user maybe the gorilla being the character and all you wanted was

08:40.540 --> 08:48.460
the sleep method and then on top of that you are assuming that this is what it is.

08:48.470 --> 08:55.610
That is user is going to have these methods watcher and character is going to have the same thing and

08:55.940 --> 09:03.550
this structure or what we might call taxonomy is that we're predicting that this is how it's going to

09:03.550 --> 09:11.660
be even in the future but as soon as we start updating the game or changing small things or adding new

09:11.660 --> 09:19.280
classes with subtle difference maybe changing what inherits from one the fact that all of this is so

09:19.280 --> 09:27.590
tightly coupled and that we inherit everything from our class and we have to make sure that we structure

09:27.590 --> 09:31.220
our programs in a way where inheritance makes sense.

09:32.140 --> 09:36.670
And as soon as something changes where maybe the watcher has to move up a class.

09:36.670 --> 09:42.430
Well everything just becomes too tightly couple where eventually as a program gets bigger and bigger

09:43.060 --> 09:45.700
it creates more and more issues.

09:46.000 --> 09:51.430
And then you start to refactor the code and all of a sudden you start violating the dry principle of

09:51.610 --> 09:57.450
do not repeat yourself if we know that some of this inheritance principles are bad.

09:57.540 --> 10:00.540
How can we fix it with composition.

10:00.600 --> 10:08.460
Well the first thing we can do is to remove all the methods what I mean by that.

10:08.540 --> 10:15.490
Let's demonstrate with an example let's create a function that creates an elf.

10:15.890 --> 10:26.900
And this elf will have name weapon and type and in here we'll just have the elf that we create.

10:27.550 --> 10:35.720
And this elf will have the name and we can just go like this with the new E6 syntax.

10:36.740 --> 10:37.400
And there you go.

10:37.400 --> 10:46.550
We have an elf just like we had here in our constructor but without necessarily worrying about the character

10:46.550 --> 10:56.300
and the elf and the inheritance model but let's say that the elf can also attack assuming that in this

10:56.300 --> 11:04.990
class we had the attack method or we don't need to because while it inherited with composition how can

11:04.990 --> 11:05.520
we do that.

11:05.560 --> 11:14.890
If we're not going to do inheritance Well the idea with composition is it's all about what it has the

11:14.890 --> 11:22.970
abilities that it has so the code is structure as to what it does to the data instead of what the elf

11:23.060 --> 11:23.590
is.

11:23.600 --> 11:26.510
So the elf can attack.

11:26.510 --> 11:35.660
In that case why not just create a function called attack that takes in the user or in this case the

11:35.930 --> 11:49.260
let's say character and in here we can just return object dot assign which we've seen before and just

11:49.260 --> 11:50.930
return a new object.

11:52.100 --> 12:02.720
With the attack function attached to it so maybe we can name this to get attack ability which allows

12:03.080 --> 12:10.160
our character to be added or have the elf character

12:12.780 --> 12:17.190
add the attack function which can be anything.

12:17.190 --> 12:19.430
I'll just leave it blank for now.

12:22.390 --> 12:32.110
So now we can just call get attack and we'll return from this function in this get attack will receive

12:32.380 --> 12:43.390
the elf and this get attack will add the attack function that will add in here to the elf we're composing

12:43.510 --> 12:49.590
instead of just inheriting we're saying hey these are the abilities that the elf has.

12:49.670 --> 12:53.540
Here's the barest elf character possible.

12:53.820 --> 13:02.890
And if we want we can keep adding abilities to the elf so using this method I can say that I can keep

13:02.920 --> 13:03.690
adding things.

13:03.760 --> 13:06.690
I can say that the elf can attack.

13:06.760 --> 13:09.900
Can also let's say sleep.

13:10.030 --> 13:11.160
What about an ogre.

13:11.200 --> 13:19.960
Well an ogre can attack it can make forts but it can also definitely sleep.

13:20.380 --> 13:25.370
Now this is pseudocode obviously but I hope you understand what I'm trying to get it.

13:26.220 --> 13:34.830
We've turned this inheritance model from what the elf is which we had here.

13:34.830 --> 13:39.160
This is what the elf is to what the elf does.

13:39.180 --> 13:48.450
We have the base elf but we give the elf abilities through things like get attack which just uses functions

13:48.810 --> 13:57.240
to add to the character object different abilities so that we can compose these small little pieces

13:57.390 --> 14:07.450
of functionality to describe our character and the beauty here is that state is not really created internally

14:08.940 --> 14:13.900
get attacked simply accepts a state and returns it.

14:13.980 --> 14:15.450
Same with Elf.

14:15.570 --> 14:24.810
We have a function that internally creates elf but then spits out a new ELF object with the functionality

14:24.810 --> 14:36.820
that we need to review inheritance is a superclass that is extended to smaller pieces that add or overwrite

14:36.820 --> 14:37.590
things.

14:38.020 --> 14:44.170
That's inheritance and although you can be careful with it and making sure that the base class is very

14:44.170 --> 14:53.500
very general so that we don't overload our subclasses it can easily get out of hand as we go deeper

14:53.530 --> 14:56.170
and deeper down the inheritance chain.

14:56.560 --> 15:00.630
And once we need to change something it becomes really difficult.

15:00.760 --> 15:07.950
On the other hand with composition it's about smaller pieces that are combined to create something bigger

15:09.130 --> 15:16.360
we combined the boxes based on what we need to create our desired output.

15:16.360 --> 15:23.740
And if we need to add something later on while we just add another puzzle by composing things together

15:23.980 --> 15:28.660
or we add another box and composing things or you can remove them.

15:28.780 --> 15:36.490
If we don't need them anymore I argue and a lot of programmers argue that composition is a better solution

15:36.670 --> 15:38.750
long term than inheritance.

15:38.770 --> 15:41.970
This doesn't mean that inheritance is always bad.

15:42.370 --> 15:48.610
There are ways that you can still write great code with inheritance but the problems that might come

15:48.610 --> 15:55.750
up in the future especially with so many unknowns and humans unable to predict the future and all the

15:55.750 --> 16:00.320
changes that we might need to make to a program it becomes really difficult.

16:00.370 --> 16:09.550
So composition is a good tool for you to use to keep in mind when creating software because this is

16:09.550 --> 16:17.510
going to help us create code that is more stable as well as easier to change in the future.

16:17.620 --> 16:19.230
I'll see in the next one Bye.
